(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{231:function(s,t,a){"use strict";a.r(t);var n=a(0),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"js的堆内存和栈内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js的堆内存和栈内存","aria-hidden":"true"}},[s._v("#")]),s._v(" JS的堆内存和栈内存")]),s._v(" "),a("p",[s._v("首先思考一个问题：")]),s._v(" "),a("p",[s._v("Q: const定义的值能改吗？")]),s._v(" "),a("p",[s._v("A: const定义的基本类型不能改变，但是定义的对象是可以通过修改对象属性等方法来改变的")]),s._v(" "),a("p",[s._v("示例：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v("\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//报错 Uncaught TypeError: Assignment to constant variable")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'木木'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\nb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'木子'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// b 此时为 {name: '木子'}")]),s._v("\nb "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 报错 Uncaught TypeError: Assignment to constant variable")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("const 为什么可以修改？ 这里就涉及到了js引擎中对变量的存储")]),s._v(" "),a("h2",{attrs:{id:"堆内存和栈内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#堆内存和栈内存","aria-hidden":"true"}},[s._v("#")]),s._v(" 堆内存和栈内存")]),s._v(" "),a("p",[s._v("在js引擎中对变量的存储主要有两种位置，堆内存和栈内存")]),s._v(" "),a("p",[s._v("栈内存主要存储js的5种基本类型：Undefined、Null、Boolean、Number和String")]),s._v(" "),a("p",[s._v("堆内存主要存储引用类型的数据：如对象(Object)、数组(Array)、函数(Function)")]),s._v(" "),a("p",[s._v("各种语言在处理堆栈的原理上都大同小异。堆是动态分配内存，内存大小不一，也不会自动释放。栈是自动分配相对固定大小的内存空间，并由系统自动释放")]),s._v(" "),a("p",[s._v("栈，线性结构，后进先出，便于管理"),a("br"),s._v("\n堆，一个混沌，杂乱无章，方便存储和开辟内存空间")]),s._v(" "),a("div",{staticClass:"danger custom-block"},[a("p",{staticClass:"custom-block-title"},[s._v("注意")]),s._v(" "),a("p",[s._v("引用类型的数据的地址指针是存储于栈中的，当我们想要访问引用类型的值的时候，需要先从栈中获得对象的地址指针，然后，在通过地址指针找到堆中的所需要的数据，可以看下面的图理解")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://github.com/MY729/BLOG/raw/gh-pages/img/js/%E5%86%85%E5%AD%98-1.jpg",alt:"An image"}})]),s._v(" "),a("p",[s._v("栈内存中的变量一般都是已知大小或者有范围上限的，算作一种简单存储。而堆内存存储的对象类型数据对于大小这方面，一般都是未知的")]),s._v(" "),a("p",[s._v("因此当我们定义一个const对象的时候，我们说的常量其实是指针，就是const对象对应的堆内存指向是不变的，但是堆内存中的数据本身的大小或者属性是可变的。而对于const定义的基础变量而言，这个值就相当于const对象的指针，是不可变")]),s._v(" "),a("p",[s._v("我们知道let可以定义块级作用域，上面了解js内存的存储，解释const、let定义的变量不能二次定义的流程也就比较容易理解了，每次使用const或者let去初始化一个变量的时候，会首先遍历当前的内存栈，看看有没有重名变量，有的话就返回错误")]),s._v(" "),a("h2",{attrs:{id:"内存分配和垃圾回收"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存分配和垃圾回收","aria-hidden":"true"}},[s._v("#")]),s._v(" 内存分配和垃圾回收")]),s._v(" "),a("p",[s._v("栈内存线性有序存储，容量小，系统分配效率高"),a("br"),s._v("\n堆内存首先要在堆内存新分配存储区域，之后又要把指针存储到栈内存中，效率相对就要低一些")]),s._v(" "),a("p",[s._v("栈内存变量基本上用完就回收了，而堆内存中的变量因为存在很多不确定的引用，只有当所有调用的变量全部销毁之后才能回收")])])},[],!1,null,null,null);t.default=e.exports}}]);